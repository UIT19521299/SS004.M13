<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>